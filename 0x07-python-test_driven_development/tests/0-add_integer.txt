Using ``add_integer``

------------------------------------------

add_integer adds two numbers int/floats and returns the result.
Raises an error if either of the two number are not of
type float or int.

------------------------------------------

Usage:
======

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(2, 3)
    5


    >>> add_integer(2, -3)
    -1

Two floats:
    >>> add_integer(2.0, 3.0)
    5

flots are casted to int:
    >>> add_integer(2.9, 0.2)
    2

    >>> add_integer(-2.9, -0.2)
    -2

    >>> add_integer(2.3, -3)
    -1

No second argument, b equals 98 by default:
    >>> add_integer(2)
    100


Invalid input:

    >>> add_integer("hello", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(2, "hello")
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

Both inputs are invalid:
    >>> add_integer("hello", "there")
    Traceback (most recent call last):
    TypeError: a must be an integer

Invalid inpiut, infinity:
    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
